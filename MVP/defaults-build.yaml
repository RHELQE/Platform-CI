- defaults:
    name: defaults-build
    node: 'jslave-platform'
    parameters:
        - string:
            name: id
        - string:
            name: task_id
        - string:
            name: CI_TYPE
        - string:
            name: MESSAGE_HEADERS
        - string:
            name: CI_MESSAGE
        - string:
            name: tag
        - string:
            name: name
        - string:
            name: version
        - string:
            name: release
        - string:
            name: BUILD
    wrappers:
        - ansicolor
        - workspace-cleanup
        - timestamps
        - build-name:
            name: ${{ENV,var="name"}}-${{ENV,var="version"}}-${{ENV,var="release"}}
        - inject:
            script-content: echo "create_time=$(date --utc +%FT%TZ)" >> $WORKSPACE/job.properties
    publishers:
        - postbuildscript:
            script-only-if-succeeded: False
            script-only-if-failed: True
            builders:
                - shell: |
                    echo "Jenkins job failed or canceled - canceling any submitted Beaker jobs"
                    bkr job-cancel ${{BKR_JOBID}}
        - postbuildscript:
            script-only-if-succeeded: False
            builders:
                - shell: |
                    BKR_JOBID_NUM=`echo ${{BKR_JOBID//J:/}}`
                    echo "BKR_JOBID_NUM=${{BKR_JOBID_NUM// /+}}" >> $WORKSPACE/job.properties
                    BKR_TESTS_EXEC=0
                    BKR_TESTS_FAILED=0
                    for jobid in $BKR_JOBID; do
                      bkr job-results --format junit-xml $jobid > $WORKSPACE/$jobid.xml
                      for testsuite in $(grep hostname $WORKSPACE/$jobid.xml); do
                        echo $testsuite | grep tests= && BKR_TESTS_EXEC=$((BKR_TESTS_EXEC+$(echo $testsuite | cut -d'"' -f2)))
                        echo $testsuite | grep failures= && BKR_TESTS_FAILED=$((BKR_TESTS_FAILED+$(echo $testsuite | cut -d'"' -f2)))
                      done
                    done
                    echo "BKR_TESTS_EXEC=$BKR_TESTS_EXEC" >> $WORKSPACE/job.properties
                    echo "BKR_TESTS_FAILED=$BKR_TESTS_FAILED" >> $WORKSPACE/job.properties
                    TESTS=('[{{"executor": "beaker", "arch": "'"$ARCH"'", "executed": "'"$BKR_TESTS_EXEC"'", "failed": "'"$BKR_TESTS_FAILED"'"}}]')
                    echo "TESTS=$TESTS" >> $WORKSPACE/job.properties
                - inject:
                    properties-file: $WORKSPACE/job.properties
        - postbuildscript:
            script-only-if-succeeded: False
            builders:
                - shell: |
                    # Steps to generate default/custom test result message to CI

                    # Clone kernel-ci repo somewhere
                    # Source libcim.sh
                    cd kernel-ci
                    export PROJECT_BUILDER_PACKROOT=$WORKSPACE/shared
                    env >> $WORKSPACE/job.properties
                    source $PROJECT_BUILDER_PACKROOT/lib/bash/libcim.sh

                    # Call cim_putenv if you want to customize some values in the message
                    # Otherwise cim_injectenv will generate message by best guess
                    # Examples of calling cim_putenv:
                    # cim_putenv "body.artifact.component" "${{your_component}}"
                    # cim_putenv "body.namespace" "kernel-qe.kernel-ci.${{your_team}}.${{your_component}}"
                    # cim_putenv "body.type" "tier0"

                    # Determine what result should be sent
                    if [ "${{#BKR_JOBID}}" -eq 0 ]; then
                        # No test has been submitted
                        test_result=$CIM_TEST_STATUS_FATAL
                    elif [ "$BKR_TESTS_EXEC" -eq 0 ]; then
                        # No test result has been retrieved
                        test_result=$CIM_TEST_STATUS_ERROR
                    elif [ "$BKR_TESTS_FAILED" -ne 0 ]; then
                        # At least one test failed
                        test_result=$CIM_TEST_STATUS_FAIL
                    else
                        # No test failed
                        test_result=$CIM_TEST_STATUS_PASS
                    fi

                    # Call cim_injectenv to generate values which will be sent in CI-Publisher, including:
                    #     CIM_MSG_TOPIC, CIM_MSG_HEAD, CIM_MSG_BODY
                    cim_injectenv $test_result

                - inject:
                    properties-file: $WORKSPACE/job.properties
        - archive:
            artifacts: '*.txt, *.xml, *.properties'
            allow-empty: 'true'
        - junit:
            results: 'J:*.xml'
        - ci-publisher:
            message-type: Custom
            override-topic: ${{CIM_MSG_TOPIC}}
            message-properties: ${{CIM_MSG_HEAD}}
            message-content: ${{CIM_MSG_BODY}}
        - email-ext:
            recipients: ${{OWNERSHIP,var="JOB_COOWNERS_EMAILS"}}
            subject: $DEFAULT_SUBJECT [${{ENV,var="name"}}-${{ENV,var="version"}}-${{ENV,var="release"}}] (${{TEST_COUNTS,var="fail"}}/${{TEST_COUNTS}})
            body: |
                $DEFAULT_CONTENT
                Job details at https://beaker.engineering.redhat.com/matrix/?job_ids=${{ENV,var="BKR_JOBID_NUM"}}
            always: true
            failure: false
            send-to:
                - recipients
